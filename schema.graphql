input PostMessageInput {
  to: ID!
  message: String!
}

input ReadMessagesInput {
  messages: [ID!]!
}

type PostMessageResponse {
  status: Int!
  success: Boolean!
  error: String
  message: Message
}

type ReadMessagesResponse {
  status: Int!
  success: Boolean!
  error: String
}

type Group {
  id: ID!
  name: String!
  photoUrl: String!
  members: [Contact!]!
  conversation: Conversation!
}

type Viewer {
  id: ID!
  name: String!
  photoUrl: String!
  title: String!
}

type Message {
  id: ID!
  from: Contact!
  to: Conversation!
  dateTimeIso: String!
  message: String!
}

type Contact {
  id: ID!
  name: String!
  photoUrl: String!
  title: String!
}

type Conversation {
  id: ID!
  messages: [Message!]!
  lectures: [Lecture!]!
  members: [Contact!]!
}

type Lecture {
  id: ID!
  user: Contact!
  Conversation: Conversation!
  dateTimeIso: String
}

type Query {
  group(groupId: ID!): Group
  contact(contactId: ID!): Contact
  viewerContacts: [Contact!]!
  viewerGroups: [Group!]!
}

type Mutation {
  postMessage(message: PostMessageInput): PostMessageResponse
  readMessages(messages: ReadMessagesInput): ReadMessagesResponse
}
